= AvatarsForRails

This project rocks and uses MIT-LICENSE.


= Installation

Add to your Gemfile:

  gem 'avatars_for_rails'

and run:

  bundle update

Then, if you have a class named actor and you want it to have avatars, run:

  rails generate avataras_for_rails:install actor

This will generate the following:
* A public/ file with the js and css files required.
* A initializer file with configuration for avatars_for_rails.
* A migration providing the database schema for using avatars_for_rails with the actor class.

Do not forget to migrate your database

  rake db:migrate
  
In your application layout you have to add  this on the <head> label:

  <head>
    <% stylesheet_link_tag :all %>
    <% javascript_include_tag :defaults %>
    <%= yield :headers %>
    <%= csrf_meta_tag %>
    <script type="text/javascript" charset="utf-8">
        $(document).ready(function() {
          <%= yield :javascript %>
        })
    </script>
  </head>

In config/initializers/avatars_for_rails.rb  you have to change:

  def current_avatarable_object
      return Actor.find(:all).first
  end
    
to return the actor you wants to be the owner of the new avatars, etc For example, you can return the current logged in actor.

Finally, add to your actor model the relation with avatars_for_rails:

  has_many :avatars
  
Now, if you go to /avatars you will see:
* A list of all the avatars for the current actor. You can change the default and delete avatars in this list.  
* Forms for creating a new avatar with two options. A typical file filed or a drag and drop file field

For rendering the avatars list:
  <%= render :partial => 'list' %>
  
For rendering the new avatar form:
  <%= render :partial => 'form' %>
  
For include the javacript and css files:
  <%= render :partial => 'includes' %>
or  
  <% content_for :headers do %>
    <%= javascript_include_tag 'jquery' %>
    <%= javascript_include_tag 'jquery.Jcrop.min' %>
    <%= javascript_include_tag 'jquery-ui.min' %>
    <%= javascript_include_tag 'rails' %>
    <%= javascript_include_tag 'avatars' %>
    <%= javascript_include_tag 'jquery.form' %>
    <%= javascript_include_tag 'jquery.fileupload' %>
    <%= javascript_include_tag 'jquery.fileupload-ui' %>
    <%= stylesheet_link_tag "jquery.Jcrop", :media => "screen, projection" %>
    <%= stylesheet_link_tag "avatars", :media => "screen, projection" %><br/>
    <%= stylesheet_link_tag "jquery.fileupload-ui", :media => "screen, projection" %><br/>
  <%end%>
  
For rendering an image_tag for an acctor's avatar:
  <%= image_tag(avatar.logo.url(:style) ) %>
  
The avaible styles for now are:

  :representation => 20x20 px
  :tie => 30x30 px
  :actor => 35x35 px
  :profile => 94x94 px
 